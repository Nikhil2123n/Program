#include <stdio.h>
#include <stdlib.h>

// Structure for a binary search tree node
typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

// Function declarations
Node* createNode(int data);
Node* insertNode(Node* root, int data);
void inorderTraversal(Node* root);
void preorderTraversal(Node* root);
void postorderTraversal(Node* root);
Node* searchNode(Node* root, int key);
Node* findMin(Node* root);
Node* deleteNode(Node* root, int key);
void freeTree(Node* root);

int main() {
    Node* root = NULL;

    // Inserting nodes into the BST
    root = insertNode(root, 50);
    root = insertNode(root, 30);
    root = insertNode(root, 70);
    root = insertNode(root, 20);
    root = insertNode(root, 40);
    root = insertNode(root, 60);
    root = insertNode(root, 80);

    // Traversals
    printf("Inorder Traversal:\n");
    inorderTraversal(root);
    printf("\n");

    printf("Preorder Traversal:\n");
    preorderTraversal(root);
    printf("\n");

    printf("Postorder Traversal:\n");
    postorderTraversal(root);
    printf("\n");

    // Searching for a node
    int key = 40;
    Node* found = searchNode(root, key);
    if (found) {
        printf("\nNode %d found in the tree.\n", key);
    } else {
        printf("\nNode %d not found in the tree.\n", key);
    }

    // Deleting a node
    printf("\nDeleting node 30...\n");
    root = deleteNode(root, 30);
    printf("Inorder Traversal after deletion:\n");
    inorderTraversal(root);
    printf("\n");

    // Freeing the tree
    freeTree(root);
    printf("\nBinary Search Tree freed.\n");

    return 0;
}

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to insert a node into the BST
Node* insertNode(Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }
    if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data);
    }
    return root;
}

// Inorder traversal of the BST
void inorderTraversal(Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

// Preorder traversal of the BST
void preorderTraversal(Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}

// Postorder traversal of the BST
void postorderTraversal(Node* root) {
    if (root != NULL) {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ", root->data);
    }
}

// Function to search for a node in the BST
Node* searchNode(Node* root, int key) {
    if (root == NULL || root->data == key) {
        return root;
    }
    if (key < root->data) {
        return searchNode(root->left, key);
    }
    return searchNode(root->right, key);
}

// Function to find the minimum node in the BST
Node* findMin(Node* root) {
    while (root->left != NULL) {
        root = root->left;
    }
    return root;
}

// Function to delete a node from the BST
Node* deleteNode(Node* root, int key) {
    if (root == NULL) {
        return root;
    }
    if (key < root->data) {
        root->left = deleteNode(root->left, key);
    } else if (key > root->data) {
        root->right = deleteNode(root->right, key);
    } else {
        // Node with only one child or no child
        if (root->left == NULL) {
            Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            Node* temp = root->left;
            free(root);
            return temp;
        }

        // Node with two children: Get the inorder successor
        Node* temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

// Function to free the entire BST
void freeTree(Node* root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root);
    }
}
